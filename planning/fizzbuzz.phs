# Basics
{*} $&& global =
{+} $|| global =
{$_ =} $pop =
{{ $a  $b } = b a } $swap =
{0 ==} $! =
{> !} $<= =
{< !} $>= =

# Strings
{ I32 I32 } pack class $Str =
{ type Str == } { unpack pop } $.len fun
{ type Str == } { unpack swap pop } $.addr fun
{ $lit = { lit } pack Str make } $to_Str = # todo: overload make

# Cucked io monad alternative
{ $T = T } class $Monad =
$Monad ~ class $IO =

# These operators exist only such that we can do operations involving various monad types
{ { $a  $b } = { a b } }
   # {{Any Monad} {Any Monad} Arrow} {{Any Monad} {Any Monad} Arrow} Arrow as
$>> =
{ { $a  $b } = { a b } }
   # {{Any Monad} {Any Monad} Arrow} {{Any Monad} {Any Monad} Arrow} Arrow as
$>>= =

# Define print for numbers
{ { $io  $v } =
    v type I32 I64 | F32 F64 | | ==
    io type Any IO == && }
{ { $io  $v } =
    io v { io type v type } { io type } Arrow { "js" "console.log" } import @
} $print fun

# Define print for strings
{ { $io  $str } =
    str type Str ==
    io type Any IO == && }
{ { $io  $str } =
    io str { io type Str } { io type } Arrow { "js" "logStr" } import @
} $print fun


# export for performing IO
{ Void IO  I32 } {
    $n =

    # Some strings
    "fizz" to_Str $fizz =
    "buzz" to_Str $buzz =
    "fizzbuzz" to_Str $fizzbuzz =

    # fizzbuzz logic
    { true } { print } $fb fun
    { 3 % 0 == } { pop fizz print } $fb fun
    { 5 % 0 == } { pop buzz print } $fb fun
    { $n = n 3 % 0 == n 5 % 0 == * } { pop fizzbuzz print } $fb fun

    # from 0 - n do fizzbuzz
    {
        { $n  $i } =
        { true } { $io = $io ~ } $cond fun
        { i n <= } {
            i fb
            n  i 1 +  iter
        } $cond fun
        cond
    } $iter =

    n 1 iter
} $main export
