# Import standard library (ie - math operators)
"./stdlib/prelude.phs" include use

# A type that accepts an integer of any size
I32 I64 | $Int =

# Floating point union type
# Note braces make expressions lazy evaluated
{ F32 F64 | } $Float =

# Specify a tuple type consiting of two numbers
{ Float Int | dup } pack $Pair =

# Using `class` makes the type more strict
#  It will only accept instances of same class
Pair class $Vector2 =

# Access operators to emulate objects
{ type Vector2 == } { unpack pop } $.x fun
{ type Vector2 == } { unpack swap pop } $.y fun

# These are equivalent to methods
{ $v = $f =
	f type Float Int | ==
	v type Vector2 == &&
} {
	# Return a new vector with scaled coords
	$v = $f =
	{	v .x f *
		v .y f *
	} pack Vector2 make
} $.scale fun

# Operator overloading
{ $b = $a =
	a type Vector2 ==
	b type Vector2 == &&
} {
	# Return new vector with sum
	$b = $a =
	{	a .x  b .x +
		a .y  b .y +
	} pack Vector2 make
} $+ global fun

# Use the make operator to instantiate a class
{ 2 1 } pack Vector2 make $v =

# Access fields via access operators
v .x :data	# 2
v .y :data	# 1

# Make a scaled version of v
# Notice it's 2x as big
2 v .scale $v2 =
v2 :data # [ 4, 2 ]

# Add the vectors
v v2 + :data # [ 6, 3 ]