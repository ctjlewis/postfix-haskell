# Basics
{*} $&& global =
{+} $|| global =
{$_ =} $pop =
{{ $a  $b } = b a } $swap =

# Strings
{ I32 I32 } pack class $Str =
{ type Str == } { unpack pop } $.len fun
{ type Str == } { unpack swap pop } $.addr fun
{ $lit = { lit } pack Str make } $to_Str = # todo: overload make

# Cucked io monad alternative
{ $T = T } class $Monad =
$Monad ~ class $IO =

# These operators exist only such that we can do operations involving various monad types
{ { $a  $b } = { a b } }
   # {{Any Monad} {Any Monad} Arrow} {{Any Monad} {Any Monad} Arrow} Arrow as
$>> =
{ { $a  $b } = { a b } }
   # {{Any Monad} {Any Monad} Arrow} {{Any Monad} {Any Monad} Arrow} Arrow as
$>>= =

# Define print for numbers
{ { $io  $v } =
    v type I32 I64 | F32 F64 | | ==
    io type Any IO == && }
{ { $io  $v } =
    io v { io type v type } { io type } Arrow { "js" "console.log" } import @
} $print fun

# Define print for strings
{ { $io  $str } =
    str type Str ==
    io type Any IO == && }
{ { $io  $str } =
    io str { io type Str } { io type } Arrow { "js" "logStr" } import @
} $print fun

# Lazy evaluated
{ "Hello, world!" to_Str print }
{ 1337 print } >> $action =

# export for performing IO
{ Void IO } {
    action

    "Hello, world!" to_Str print
    666 print
} $main export

